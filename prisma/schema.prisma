// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  
  // Relations
  feedback  Feedback[]
  votes     Vote[]
  
  @@map("users")
}

model Feedback {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("Under Review") // Under Review, In Progress, Completed
  votes       Int      @default(0)
  tags        String?  // JSON array as string
  category    String
  subCategory String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  approvedAt  DateTime?
  
  // Moderation
  isApproved  Boolean  @default(true) // Auto-approve for now
  adminNotes  String?
  moderatedBy String?
  
  // Relations
  submittedBy   String?
  submitter     User?   @relation(fields: [submittedBy], references: [id])
  userVotes     Vote[]
  
  // Indexes for performance
  @@index([status])
  @@index([votes])
  @@index([createdAt])
  @@index([isApproved])
  @@map("feedback")
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  feedbackId String
  createdAt  DateTime @default(now())
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  // Ensure one vote per user per feedback
  @@unique([userId, feedbackId])
  @@map("votes")
}

model AdminSession {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([expiresAt])
  @@map("admin_sessions")
}
