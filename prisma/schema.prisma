// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  
  // Relations
  feedback  Feedback[]
  votes     Vote[]
  
  @@map("users")
}

model Feedback {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("Under Review") // Under Review, In Progress, Completed
  votes       Int      @default(0)
  tags        String?  // JSON array as string
  category    String
  subCategory String?
  
  // AI Automation fields
  aiTaggedAt           DateTime? @map("ai_tagged_at")
  aiProcessingStatus   String    @default("pending") @map("ai_processing_status") // pending, processing, completed, failed
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  approvedAt  DateTime?
  
  // Moderation
  isApproved  Boolean  @default(true) // Auto-approve for now
  adminNotes  String?
  moderatedBy String?
  
  // Relations
  submittedBy   String?
  submitter     User?   @relation(fields: [submittedBy], references: [id])
  userVotes     Vote[]
  
  @@map("feedback")
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  feedbackId String
  createdAt  DateTime @default(now())
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  // Ensure one vote per user per feedback
  @@unique([userId, feedbackId])
  @@map("votes")
}

model AdminSession {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("admin_sessions")
}

model AiInsight {
  id                String   @id @default(cuid())
  theme             String   // Primary tag/theme
  insightSummary    String   @map("insight_summary")
  priorityScore     Int      @default(1) @map("priority_score") // 1-10
  feedbackCount     Int      @default(0) @map("feedback_count")
  sampleFeedbackIds String?  @map("sample_feedback_ids") // JSON array: ["id1","id2"]
  generatedAt       DateTime @default(now()) @map("generated_at")
  exportedAt        DateTime? @map("exported_at")
  
  @@map("ai_insights")
}

model AutomationLog {
  id              String    @id @default(cuid())
  taskType        String    @map("task_type") // ai_tagging, insight_generation, sheets_export
  status          String    // running, completed, failed
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  itemsProcessed  Int       @default(0) @map("items_processed")
  errorMessage    String?   @map("error_message")
  triggeredBy     String    @default("auto") @map("triggered_by") // auto, manual, admin
  
  @@map("automation_logs")
}
